<?php
//1. В чем заключается суть ключевого слова global? Когда его применение целесообразно?
/*
 * Ключевое слово global указывает использовать переменную(ые) с указанным именем из глобальной области видимости.
 * Не советуют использовать global в своих приложениях, но если применять, то на какие-то переменные, используемые во многих частях программы,
 * например, данные для подключения к базе данных или точнее объект подключения к базе данных.
 */

//2. Какие суперглобальные переменные вы знаете?
/*
 * $_POST, $_GET, $_SESSION, $_REQUEST, $_SERVER, $_FILES, $_COOKIE
 */

//3. Когда нужно использовать закрывающий дескриптор "?/>"?
/*
 * Если после идет разметака.
 */

//4. Что выведет программа в каждом случае и почему?
function changeX($x){
$x += 5;
echo $x;
}
$x = 1;
echo $x;
changeX($x);
echo $x;
// Будет выведено 161, потому что $x передается в аргумент функции по значению, то что имя аргумента и переменной одинаковы - ничего не значит.

//5. Что выведет программа в каждом случае и почему?
function test()
{
static $a = 0;
echo $a;
$a++;
}
test();
test();
test();
/*
 * Будет выведено 012, потому что переменная $a объявлена как static, значит она не будет очищена из памяти после выполнения функции,
 * и при следующем обращении сохранит свое предыдущее значение.
 */

//6. Как перевернуть массив? Есть массив array(‘h’, ‘e’, ‘l’, ‘l’, ‘o’), как из него получить array(‘o’, ‘l’, ‘l’, ‘e’, ‘h’)?
$a = array('h', 'e', 'l', 'l', 'o');
$b = [];

var_dump(array_reverse($a));

for ($i = count($a) - 1; $i >= 0; $i--) {
    $b[] = $a[$i];
}

var_dump($b);
/*
 * Мне известно 2 способа: использовать встроенную функцию array_reverse(), либо использовать цикл.
 */

//7. Как перевернуть строку задом наперед?
/*
 * Чтобы перевернуть строку так же есть 2 способа: встроенная функция strrev() или необходимо преобразовать ее в массив символов
 * (для этого есть несколько функций: str_split(), preg_split(), mb_split(), explode()).
 * Воспользоваться решением задачки №6 и "склеить" массив обратно в строку функцией implode().
 */

//8. Что будет результатом работы данного кода?
$a=0;
if($b=$a)
echo "One";
else
echo "Two";
/*
 * Оператор присваивания всегда возвращает значение присваивания, в данном случае 0, который при приведении типов преобразуется в false,
 * а значит выполнится блок else и мы увидим на экране "Two".
 */

//9. Сгенерировать три случайных числа в диапазоне от 0 до 10. Если сумма этих чисел меньше 15, сгенерировать новую тройку.
$a=0;
while($a < 15) {
    for ($i = 0; $i < 3; $i++) {
        $a += rand(0, 10);
    }

    echo $a . PHP_EOL;

    if ($a < 15) {
        $a = 0;
    }
}

//10. Какое число выведет данный код?
$i = 10;
$i += ++$i + $i + $i++;
echo $i;
/*
 * Результатом этого кода будет выведено число 45, потому что сначала выполнится операция преинкремента, $i станет равна 11,
 * после выполнится первое сложение, мы получим результат 22, а $i так же равна 11,
 * затем выполнится второе сложение, мы получим результат 33, а постинкремент сделает значение $i равной 12,
 * последним выполнится оператор присваивания, т.е. 33 + 12 = 45.
 */

//11. Что выведет приведенный ниже код?
$a = "1";
$a[$a] = "2";
echo $a;
/*
 * А вот это я подзабыл, видимо потому что никогда не обращался к строке по индексу в php, хотя в js делаю это часто)
 * Проверил в песочнице - получаем 12, но это не работает с многобайтовыми кодировками (видимо поэтому я и не использовал это),
 * т.е. мы обращаемся по индексу не к символам строки, а к их байтам, получается если будет кирилица, то мы сломаем строку, при вставке однобайтового символа
 * и вобще не вставляет кирилицу по индексу, т.к. ее символы требуют 2 байта места, и, предполагаю, что получается многомерный массив байт в месте вставки...
 */